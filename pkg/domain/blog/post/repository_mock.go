// Code generated by mockery v2.9.4. DO NOT EDIT.

package post

import (
	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockPostRepository is an autogenerated mock type for the PostRepository type
type MockPostRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: filter
func (_m *MockPostRepository) Count(filter *PostWhereDTO) (*int, error) {
	ret := _m.Called(filter)

	var r0 *int
	if rf, ok := ret.Get(0).(func(*PostWhereDTO) *int); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*PostWhereDTO) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: data
func (_m *MockPostRepository) Create(data *Post) (*Post, error) {
	ret := _m.Called(data)

	var r0 *Post
	if rf, ok := ret.Get(0).(func(*Post) *Post); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*Post) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: where
func (_m *MockPostRepository) Delete(where primitive.ObjectID) (*Post, error) {
	ret := _m.Called(where)

	var r0 *Post
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *Post); ok {
		r0 = rf(where)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(where)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: filter, orderBy, skip, limit, customQuery
func (_m *MockPostRepository) List(filter *PostWhereDTO, orderBy *PostOrderByENUM, skip *int, limit *int, customQuery *primitive.M) ([]*Post, error) {
	ret := _m.Called(filter, orderBy, skip, limit, customQuery)

	var r0 []*Post
	if rf, ok := ret.Get(0).(func(*PostWhereDTO, *PostOrderByENUM, *int, *int, *primitive.M) []*Post); ok {
		r0 = rf(filter, orderBy, skip, limit, customQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*PostWhereDTO, *PostOrderByENUM, *int, *int, *primitive.M) error); ok {
		r1 = rf(filter, orderBy, skip, limit, customQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// One provides a mock function with given fields: filter
func (_m *MockPostRepository) One(filter *PostWhereDTO) (*Post, error) {
	ret := _m.Called(filter)

	var r0 *Post
	if rf, ok := ret.Get(0).(func(*PostWhereDTO) *Post); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*PostWhereDTO) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: where, data
func (_m *MockPostRepository) Update(where primitive.ObjectID, data *Post) (*Post, error) {
	ret := _m.Called(where, data)

	var r0 *Post
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, *Post) *Post); ok {
		r0 = rf(where, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID, *Post) error); ok {
		r1 = rf(where, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
